// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Users {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
// }

// only readable tables
model FormCatalogs {
  id          Int        @id @default(autoincrement())
  // Name of the form, e.g. "BRSR", "CDP"
  name        String
  description String?
  // e.g. "India", "USA", "UK
  region      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  // Sections of the form
  sections    Sections[]
  // QuestionSectionForm QuestionSectionForm[]
}

// Form -> Sections -> subSections -> Questions

model Sections {
  id              Int                @id @default(autoincrement())
  name            String
  description     String?
  formId          Int? // Make formId optional
  form            FormCatalogs?      @relation(fields: [formId], references: [id]) // Make form relation optional
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
  QuestionSection QuestionSections[]
  parentId        Int?               @map("parent_section_id")
  parentSection   Sections?          @relation("ParentChild", fields: [parentId], references: [id])
  subSections     Sections[]         @relation("ParentChild")
}

model Questions {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String
  answerSchema            String                   @db.Text
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt
  Answer                  Answers[]
  QuestionSection         QuestionSections[]
  GlobalSectionsQuestions GlobalSectionQuestions[]
}

model QuestionSections {
  id         Int       @id @default(autoincrement())
  questionId Int
  sectionId  Int
  question   Questions @relation(fields: [questionId], references: [id])
  section    Sections  @relation(fields: [sectionId], references: [id])
  // form       Form     @relation(fields: [formId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

// only modifyable table
model Answers {
  id         Int       @id @default(autoincrement())
  // who answered the question, thus the client id
  clientId   Int
  // the value of the answer, e.g. "Yes", "1", "{ "name": "John", "age": 30 }", 
  // a stringified JSON
  value      String    @db.Text
  questionId Int
  question   Questions @relation(fields: [questionId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@unique([clientId, questionId])
}

model GlobalSections {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt
  // QuestionSectionForm QuestionSectionForm[]
  GlobalSectionsQuestions GlobalSectionQuestions[]
}

model GlobalSectionQuestions {
  id              Int            @id @default(autoincrement())
  globalSectionId Int
  questionId      Int
  globalSection   GlobalSections @relation(fields: [globalSectionId], references: [id])
  question        Questions      @relation(fields: [questionId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
}
